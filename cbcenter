#!/bin/bash

mybasename="$(basename "$0")"
PROJECT="cbcenter"
MYPATH="${HOME}/.local/$PROJECT"
DOWNLOADS_DIR="${MYPATH}/downloads"
FAVORITES_FILE="${MYPATH}/favorites"
STREAMS_DIR="${DOWNLOADS_DIR}/streams"
CAPTURES_DIR="${DOWNLOADS_DIR}/captures"
CLEAR_STREAMS="rm -f ${STREAMS_DIR}/*"
CLEAR_CAPTURES="rm -f ${CAPTURES_DIR}/*"

TEMP_DIR="/tmp/$PROJECT"
PREVIEWS_DIR="${TEMP_DIR}/previews"
CLEAR_PREVIEWS="rm -f ${PREVIEWS_DIR}/*"
PREVIEW_URL="https://thumb.live.mmcdn.com/riw"
SEARCH_URL="https://chaturbate.com/ax/search/?keywords="
LASTSEARCH_FILE="${TEMP_DIR}/lastsearch"
ROOMS_DIR="${TEMP_DIR}/rooms"
CLEAR_ROOMS="rm -f ${ROOMS_DIR}/*"
ROOMS_URL="https://chaturbate.com/api/ts/roomlist/room-list"
LASTROOMS_FILE="${TEMP_DIR}/lastrooms"
FEMALE_ROOM="f"
MALE_ROOM="m"
COUPLE_ROOM="c"
TRANS_ROOM="t"

CODEC="h264"
VIDEO_FORMAT="mp4"
IMG_FORMAT="jpg"
HIGH_PROG=99
ID_REGEX="^[0-9]+$"

CONNECT_TIMEOUT=5
CB_ROOT_URL="https://www.chaturbate.com"
CAM_ROOT_REGEX="https:\/\/edge[0-9]+-[a-z]+\.live\.mmcdn\.com"
LIVE_PREFIX="live-"
LIVE_REGEX="${LIVE_PREFIX}(hls|edge)"
USER_PREFIX="amlst:"
USER_REGEX="[A-Za-z0-9_]{3,30}"
USER_SUFFIX="-sd-"
CODE64="[0-9a-z]{64}"
CODE64_SUFFIX="_trns_"
PLAYLIST="playlist.m3u8"
LIVE_USER_REGEX="${LIVE_REGEX}\/${USER_PREFIX}${USER_REGEX}"
EXTRA_STUFF_REGEX="${USER_SUFFIX}${CODE64}${CODE64_SUFFIX}${CODEC}"
LOCATION_REGEX="${LIVE_USER_REGEX}${EXTRA_STUFF_REGEX}"
MINIMAL_CAM_REGEX="${CAM_ROOT_REGEX}\/${LIVE_USER_REGEX}"
COMPLETE_CAM_REGEX="${MINIMAL_CAM_REGEX}${EXTRA_STUFF_REGEX}\/${PLAYLIST}"
CHUNK_REGEX="chunklist_w[0-9]+_b[0-9]+_t[0-9a-zA-Z=]+\.m3u8"
PROG_REGEX="BANDWIDTH=[0-9]+,NAME=\"FPS:[0-9]+\.[0-9]+\",CODECS=\"[a-z0-9.,]*\",RESOLUTION=[0-9]+x[0-9]+"
ROOM_REGEX="$USER_REGEX"
ROOM_RANGE_REGEX="^[$FEMALE_ROOM|$MALE_ROOM|$COUPLE_ROOM|$TRANS_ROOM]:[0-9]{0,2}:[0-9]{1,2}$"

VIEWER="imv -d"
JQ_ONLINE=".online"
JQ_OFFLINE=".offline"
JQ_HASGTAGS=".hashtags"
CURL_SEARCH_HEADER="X-Requested-With: XMLHttpRequest"
HTTP_NOT_FOUND_TEXT="404 Not Found"
HTTP_TOO_MANY_REQUESTS_TEXT="429 Too Many Requests"

OK_CODE=0
INVALID_USERNAME=1
OFFLINE_ROOM=2
UNKNOWN_ERROR=3
PLAYLIST_NOT_FOUND=4
CHUNK_NOT_FOUND=5
ROOM_ALREADY_EXIST=6
ROOM_DOESNT_EXIST=7
EMPTY_DATA=8
INVALID_ROOM_RANGE=9
INVALID_PROG_ID=10
INVALID_KEYWORD=11
INVALID_COMMAND=12
HTTP_NOT_FOUND_ERROR=13
HTTP_TOO_MANY_REQUESTS_ERROR=14

RED_FG="\033[0;31m"
GREEN_FG="\033[0;32m"
LIGHT_BLUE_FG="\033[1;34m"
YELLOW_FG="\033[1;33m"
CLEAR_FG="\033[0m"

show_help () {
    echo -e "$PROJECT usage:\nManage your favorite user rooms from $CB_ROOT_URL.\n\n\
    $mybasename COMMAND OPTION\n\nCommands and options:\n\n\
    add               username    - Add new user room to favorites.\n\
    remove            username    - Remove user room from favorites.\n\
    show-favorites                - List of favorite user rooms.\n\
    show-programs     username    - Show available programs of given user room.\n\
    show-status       [username]  - Same as 'show-favorites' command, plus status.\n\
                                    If 'username' is provided, only show that.\n\
    fetch-rooms       gender:[offset]:limit\n\
                                  - Fetch 'gender' rooms from 'offset' to\n\
                                    'offset'+'limit'. See 'Fetch ranges' section.\n\
    fetch-previews                - Fetch previews of favorite user rooms and\n\
                                    ask to open (online only).\n\
    open-previews                 - Open last fetched previews.\n\
    quick-thumb       username    - Show (not save) preview of given user room.\n\
    save-capture      username    - Save a screenshot (high resolution).\n\
    save-stream       username    - Save stream of user room.\n\
    play-stream       username    - Play stream of user room.\n\
    search            keyword     - Search a keyword on the website.\n\
    __clear_previews              - Remove all the saved preview files.\n\
    __clear_captures              - Remove all the saved capture files.\n\
    __clear_streams               - Remove all the saved stream files.\n\nFetch ranges:\n\n\
    gender: 'f' or 'm' or 'c' or 't'\n\
    offset: two digits (max) integer from 0 (or 00) to 99.\n\
            If none is provided, the value 0 is taken.\n\
    limit:  two digits (max) integer from 1 (or 01) to 99.\n\nDirectories and files:\n\n\
    PROJECT DIR:   $MYPATH/\n\
    DOWNLOADS DIR: $DOWNLOADS_DIR/\n\
    FAVORITES:     $FAVORITES_FILE\n\
    TEMPORAL DIR:  $TEMP_DIR/\n\
    PREVIEWS DIR:  $PREVIEWS_DIR/\n\
    ROOMS DIR:     $ROOMS_DIR/\n\
    LAST SEARCH:   $LASTSEARCH_FILE\n\
    LAST ROOMS:    $LASTROOMS_FILE\n\nExit codes:\n\n\
    exit code $HTTP_TOO_MANY_REQUESTS_ERROR)\n\
        You are probably being blocked by rate limiting.\n\
        A rate limiting solution measures the amount of time between each\n\
        request from each IP address, and also measures the number of\n\
        requests within a specified timeframe. If there are too many\n\
        requests from a single IP within the given timeframe, the rate\n\
        limiting solution will not fulfill the IP address's requests for a\n\
        certain amount of time.\n\
    exit code $HTTP_NOT_FOUND_ERROR)\n\
        The user room does not exist.\n\
    exit code $EMPTY_DATA or $CHUNK_NOT_FOUND)\n\
        Connection error or corrupted data.\n\
    exit code $PLAYLIST_NOT_FOUND)
        If the room is online it could be private or hidden, otherwise it\n\
        is offline.\n\nFAQs:\n\n\
    - What is a 'program ID'?\n\
        A 'program' represent the stream 'channel' or 'quality'. This channels\n\
        are identified by ID, from '0' (lowest quality) to 'n' (highest quality).\n\
        To get cam programs use 'info' command. You can go to FFMPEG Documentation\n\
        for more info.\n\
    - What do the strange errors mean when I want to play/save/capture?\n\
        See above 'Exit codes' section.
    - How can I change the default image viewer for previews?\n\
        Just change the 'VIEWER' variable to whatever you want (within the\n\
        executable).\n\
        NOTE: the image viewer must support opening entire directories."
}

send_exit_error () {
    case "$1" in
        "$INVALID_USERNAME")
            echo "Invalid username !" 1>&2
            exit $INVALID_USERNAME
            ;;
        "$OFFLINE_ROOM")
            echo "Offline room !" 1>&2
            exit $OFFLINE_ROOM
            ;;
        "$PLAYLIST_NOT_FOUND")
            echo "An error occurred while processing the page ! (PLAYLIST_NOT_FOUND)" 1>&2
            exit $PLAYLIST_NOT_FOUND
            ;;
        "$CHUNK_NOT_FOUND")
            echo "An error occurred while processing room data ! (CHUNK_NOT_FOUND)" 1>&2
            exit $CHUNK_NOT_FOUND
            ;;
        "$ROOM_ALREADY_EXIST")
            echo "The user room already exists !" 1>&2
            exit $ROOM_ALREADY_EXIST
            ;;
        "$ROOM_DOESNT_EXIST")
            echo "The user room does not exists !" 1>&2
            exit $ROOM_DOESNT_EXIST
            ;;
        "$EMPTY_DATA")
            echo "An error occurred while getting room data ! (EMPTY_DATA)" 1>&2
            exit $EMPTY_DATA
            ;;
        "$INVALID_PROG_ID")
            echo "Invalid program ID !" 1>&2
            exit $INVALID_PROG_ID
            ;;
        "$INVALID_KEYWORD")
            echo "Invalid keyword to search !" 1>&2
            exit $INVALID_KEYWORD
            ;;
        "$INVALID_COMMAND")
            echo "Error: invalid command. Use '$mybasename help' for more info." 1>&2
            exit $INVALID_COMMAND
            ;;
        "$HTTP_NOT_FOUND_ERROR")
            echo "Server response: $HTTP_NOT_FOUND_TEXT" 1>&2
            exit $HTTP_NOT_FOUND_ERROR
            ;;
        "$HTTP_TOO_MANY_REQUESTS_ERROR")
            echo "Server response: $HTTP_TOO_MANY_REQUESTS_TEXT" 1>&2
            exit $HTTP_TOO_MANY_REQUESTS_ERROR
            ;;
        "$INVALID_ROOM_RANGE")
            echo -e "Invalid room range !" 1>&2
            exit $INVALID_ROOM_RANGE
            ;;
        *)
            echo "UNKNOWN_ERROR" 1>&2
            exit $UNKNOWN_ERROR
            ;;
    esac
}

wrap_cb_user () {
    echo "${CB_ROOT_URL}/$1/"
}

curl_search () {
    curl -s --compressed -H "$CURL_SEARCH_HEADER" "${SEARCH_URL}$1"
}

is_online () {
    curl_search "$1" | jq -M $JQ_ONLINE | grep -q "\"$1\""
}

valid_id () {
    [[ "$1" =~ $ID_REGEX ]]
}

valid_room_range () {
    [[ "$1" =~ $ROOM_RANGE_REGEX ]]
}

get_programs () {
    declare -n gp_data="$1"
    local _progs
    declare -i _current=0
    while [[ $gp_data =~ $PROG_REGEX ]]; do
        _progs="$_progs\t${YELLOW_FG}PROG_ID=\"$_current\"${CLEAR_FG} - ${BASH_REMATCH[0]}\n"
        gp_data="${gp_data/${BASH_REMATCH[0]}/}"
        _current+=1
    done
    echo -e "$_progs"
}

get_data () {
    curl -siL --compressed --connect-timeout "$CONNECT_TIMEOUT" "$1"
}

extract_playlist () {
    declare -n ep_out="$2"
    local _cburl
    _cburl="$(wrap_cb_user "$1")"
    local _page
    if ! _page="$(wget -4 -qS -O - "$_cburl" 2>&1)"; then
        [[ "$_page" =~ $HTTP_NOT_FOUND_TEXT ]] && send_exit_error $HTTP_NOT_FOUND_ERROR
        [[ "$_page" =~ $HTTP_TOO_MANY_REQUESTS_TEXT ]] && send_exit_error $HTTP_TOO_MANY_REQUESTS_ERROR
    fi
    _page="$(echo -e "$_page")"
    [[ "$_page" =~ $COMPLETE_CAM_REGEX ]] || send_exit_error $PLAYLIST_NOT_FOUND
    ep_out="${BASH_REMATCH[0]}"
    return $OK_CODE
}

direct_link () {
    local _link
    extract_playlist "$1" _link
    declare -n dl_out="$2"
    local _prog="$3"
    local _data
    _data="$(get_data "$_link")"
    [[ -z $_data ]] && send_exit_error $EMPTY_DATA
    if [[ -z $_prog ]]; then
        get_programs _data
        read -rp "Select a program ID: " _prog
        valid_id "$_prog" || send_exit_error $INVALID_PROG_ID
    fi
    local _chunk
    declare -i _current=0
    while [[ $_data =~ $CHUNK_REGEX ]] && [[ $_current -le $_prog ]]; do
        _chunk="${BASH_REMATCH[0]}"
        _data="${_data/${BASH_REMATCH[0]}/}"
        _current+=1
    done
    [[ -z $_chunk ]] && send_exit_error $CHUNK_NOT_FOUND
    local _root_locat
    if [[ $_data =~ $LOCATION_REGEX ]]; then
        _root_locat="${_link%%"${LIVE_PREFIX}"*}${BASH_REMATCH[0]}"
    else
        _root_locat="${_link%/*}"
    fi
    dl_out="${_root_locat}/${_chunk}"
    return $OK_CODE
}

valid_room () {
    [[ "$1" =~ ^${ROOM_REGEX}$ ]]
}

formated_date () {
    date +%Y%m%d%H%M%S
}

room_exists () {
    grep -qx "$1" "$FAVORITES_FILE"
}

add_room () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    room_exists "$1" && send_exit_error $ROOM_ALREADY_EXIST
    echo "$1" >> "$FAVORITES_FILE"
}

remove_room () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    room_exists "$1" || send_exit_error $ROOM_DOESNT_EXIST
    sed -i "/^$1$/d" "$FAVORITES_FILE"
}

save_preview () {
    curl -s --compressed --connect-timeout "$CONNECT_TIMEOUT" "${PREVIEW_URL}/$1.$IMG_FORMAT" -o "${2}/$(formated_date)-$1.$IMG_FORMAT"
}

show_preview () {
    curl -s --compressed --connect-timeout "$CONNECT_TIMEOUT" "${PREVIEW_URL}/$1.$IMG_FORMAT" | $VIEWER -
}

fetch_all_previews () {
    $CLEAR_PREVIEWS
    while IFS="" read -r room || [ -n "$room" ]
    do
        valid_room "$room" && is_online "$room" && save_preview "$room" "$PREVIEWS_DIR" && echo "$room fetched" &
    done < "$FAVORITES_FILE"
    wait
    read -rp "Open fetched previews? (Y/N): " save
    [[ $save == [yY] || $save == [yY][eE][sS] ]] || return $OK_CODE
    open_previews_dir
}

show_quick_thumb () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    show_preview "$1"
}

open_previews_dir () {
    $VIEWER "$PREVIEWS_DIR"
}

play_room () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    is_online "$1" || send_exit_error $OFFLINE_ROOM
    local room_link
    extract_playlist "$1" room_link
    ffplay -i "$room_link"
}

save_room () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    is_online "$1" || send_exit_error $OFFLINE_ROOM
    local room_link
    direct_link "$1" room_link
    local output
    output="${STREAMS_DIR}/$(formated_date)-$1.$VIDEO_FORMAT"
    ffmpeg -i "$room_link" -codec copy "$output"

    # Another way (slower ffmpeg startup)
    #extract_playlist "$1" room_link
    #room_prog=99
    #ffmpeg -i "$room_link" -map v:p:$room_prog -map a:p:$room_prog -codec copy "$output"
}

room_capture () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    is_online "$1" || send_exit_error $OFFLINE_ROOM
    local room_link
    direct_link "$1" room_link "$HIGH_PROG"
    local output
    output="${CAPTURES_DIR}/$(formated_date)-$1.$IMG_FORMAT"
    ffmpeg -i "$room_link" -frames:v 1 -update true "$output"
}

room_programs () {
    valid_room "$1" || send_exit_error $INVALID_USERNAME
    is_online "$1" || send_exit_error $OFFLINE_ROOM
    local room_link
    extract_playlist "$1" room_link
    local room_data
    room_data="$(get_data "$room_link")"
    [[ -z $room_data ]] && send_exit_error $EMPTY_DATA
    get_programs room_data
}

keyword_search () {
    valid_room "$1" || send_exit_error $INVALID_KEYWORD
    curl_search "$1" > "$LASTSEARCH_FILE"
    echo "Online users:"
    jq "$JQ_ONLINE" "$LASTSEARCH_FILE"
    echo "Recently online users:"
    jq -M "$JQ_OFFLINE" "$LASTSEARCH_FILE"
    echo "Hashtags:"
    jq -M "$JQ_HASGTAGS" "$LASTSEARCH_FILE"
}

show_status () {
    if is_online "$1"; then
        echo -e "$1 is ${LIGHT_BLUE_FG}online${CLEAR_FG}"
    else
        echo "$1 is offline"
    fi
}

status_all () {
    while IFS="" read -r room || [ -n "$room" ]
    do
        valid_room "$room" && show_status "$room" &
    done < "$FAVORITES_FILE"
    wait
}

do_global_status () {
    if [[ -z $1 ]]; then
        status_all
    else
        valid_room "$1" || send_exit_error $INVALID_USERNAME
        show_status "$1"
    fi
}

favorites_list () {
    while IFS="" read -r room || [ -n "$room" ]
    do
        echo "$room"
    done < "$FAVORITES_FILE"
}

open_rooms_dir () {
    $VIEWER "$ROOMS_DIR"
}

save_room_list () {
    curl -s --compressed "$ROOMS_URL/?genders=$1&offset=$2&limit=$3&enable_recommendations=false" -o "$LASTROOMS_FILE"
}

fetch_all_rooms () {
    valid_room_range "$1" || send_exit_error $INVALID_ROOM_RANGE
    local gender
    gender="${1%%:*}"
    local offset
    offset="${1#*:}"
    offset="${offset%:*}"
    [[ -z $offset ]] && offset=0
    [[ ${#offset} -ne 1 ]] && offset="${offset#0}"
    local limit
    limit="${1##*:}"
    [[ ${#limit} -ne 1 ]] && limit="${limit#0}"
    [[ $limit -eq 0 ]] && send_exit_error $INVALID_ROOM_RANGE

    echo "Fetching $gender rooms from $offset to $((offset+limit)) ..."

    save_room_list "$gender" "$offset" "$limit" || send_exit_error $UNKNOWN_ERROR
    declare -i num_rooms
    num_rooms="$(jq -e '.rooms | length' "$LASTROOMS_FILE")"
    [[ $num_rooms -eq 0 ]] && send_exit_error $UNKNOWN_ERROR
    $CLEAR_ROOMS

    declare -i index=0
    local room
    local action="c"
    while [[ $action == "c" ]]; do
        while room="$(jq -Mre ".rooms.[$index].username" "$LASTROOMS_FILE")"; do
            save_preview "$room" "$ROOMS_DIR" && echo "$room fetched" &
            index+=1
            [[ $((index%10)) -ne 0 ]] || break
        done
        wait
        read -rp "Open previews of fetched rooms? (Y/N): " save
        [[ $save == [yY] || $save == [yY][eE][sS] ]] && open_rooms_dir
        [[ $index -eq $num_rooms ]] && break
        read -rp "Continue fetching previews? $((num_rooms-index)) remaining (Y/N): " save
        [[ $save == [yY] || $save == [yY][eE][sS] ]] || break
    done
}

mkdir -p "$MYPATH"
mkdir -p "$DOWNLOADS_DIR"
mkdir -p "$STREAMS_DIR"
mkdir -p "$CAPTURES_DIR"
mkdir -p "$PREVIEWS_DIR"
mkdir -p "$ROOMS_DIR"
touch "$FAVORITES_FILE"

case "$1" in
    add)
        add_room "$2"
        ;;
    remove)
        remove_room "$2"
        ;;
    show-favorites)
        favorites_list
        ;;
    show-programs)
        room_programs "$2"
        ;;
    show-status)
        do_global_status "$2"
        ;;
    fetch-rooms)
        fetch_all_rooms "$2"
        ;;
    fetch-previews)
        fetch_all_previews
        ;;
    open-previews)
        open_previews_dir
        ;;
    quick-thumb)
        show_quick_thumb "$2"
        ;;
    save-capture)
        room_capture "$2"
        ;;
    save-stream)
        save_room "$2"
        ;;
    play-stream)
        play_room "$2"
        ;;
    search)
        keyword_search "$2"
        ;;
    __extract_playlist)
        valid_room "$2" || send_exit_error $INVALID_USERNAME
        __ep=""
        extract_playlist "$2" __ep
        echo "$__ep"
        ;;
    __clear_previews)
        $CLEAR_PREVIEWS
        ;;
    __clear_captures)
        $CLEAR_CAPTURES
        ;;
    __clear_streams)
        $CLEAR_STREAMS
        ;;
    __clear_all)
        $CLEAR_PREVIEWS && $CLEAR_CAPTURES && $CLEAR_STREAMS
        ;;
    help)
        show_help
        ;;
    *)
        send_exit_error $INVALID_COMMAND
        ;;
esac
